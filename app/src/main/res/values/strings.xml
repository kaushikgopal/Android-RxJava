<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Android-RxJava</string>
    <string name="hello_world">Hello world!</string>
    <string name="action_settings">设置</string>
    <string name="github_oauth_token"><!-- 请在此处插入你的 Github oauth token --></string>

    <string name="btn_demo_schedulers">后台工作 (schedulers &amp; concurrency)</string>
    <string name="btn_demo_buffer">累积请求 (buffer)</string>
    <string name="btn_demo_debounce">搜索内容监听 (debounce)</string>
    <string name="btn_demo_timeout">超时运行</string>
    <string name="btn_demo_retrofit">Retrofit + RxJava</string>
    <string name="btn_demo_double_binding_textview">双向绑定 (PublishSubject)</string>
    <string name="btn_demo_polling">RxJava 轮询</string>
    <string name="btn_demo_rxbus">Event Bus with RxJava</string>
    <string name="btn_demo_form_validation_combinel">使用 combineLatest 进行表单验证</string>
    <string name="btn_demo_pseudocache">使用 concat 进行伪缓存</string>
    <string name="btn_demo_timing">timing/intervals/delays</string>
    <string name="btn_demo_exponential_backoff">backoff（背压） 策略</string>
    <string name="btn_demo_rotation_persist">不停旋转手机</string>
    <string name="btn_demo_volley">Volley 请求 Demo</string>
    <string name="btn_demo_pagination">分页示例</string>
    <string name="btn_demo_pagination_more">MOAR</string>
    <string name="btn_demo_networkDetector">网络状态检测器 (Subject)</string>

    <string name="msg_demo_pagination">使用 Rx 进行分页的一个 Demo. 我们一次放 10 个 item，共有 55 页</string>
    <string name="msg_demo_volley">Volley 请求 Demo</string>
    <string name="msg_demo_concurrency_schedulers">这是一个如何将耗时操作放到一个后台线程的 Demo. 当这个操作结束后, 我们将会回到主线程. 全程使用 RxJava! \n\n 为了更清楚地看到它的效果. 请多次点击 button 并且要注意到无论如何点击这个 button, 我们的 ui 都不会卡顿, 因为耗时操作都是在后台运行的</string>
    <string name="msg_demo_buffer">这个示例展示了如何使用 buffer 操作符来累积事件。重复点击下面的按钮，然后你将会看到日志打印出 2s 内按钮被点击的次数</string>
    <string name="msg_demo_debounce">当你在输入框中输入时, 只有在你输入最后一个字符的时候才会打印日志, 其他情况下输入单个字符不会打印日志</string>
    <string name="msg_demo_timeout">这个示例演示了假如一个事件需要长时间才能终止的情形。此演示中的事件应在3秒内超时。按钮1的点击事件是一个需要花费 2s 去处理的事件，按钮2的点击事件是一个需要花费 5s 去处理的 n 个事件。点击按钮2，在日志中可以看到它已被取消，但是按钮 1 并不会这样。</string>
    <string name="msg_demo_retrofit">Retrofit 是一个非常好用的网络库. 它与 RxJava 一起使用会十分地优雅, 这里是一些 Jake Wharton\'s 在 Netflix (see README) 用到的 Demo. 这里真正有趣的地方是在代码和日志中.</string>
    <string name="msg_demo_retrofit_async_task_death">这里为你展示了如何使用 RxJava 替代 AsyncTask. 这里最有趣的地方在代码里.</string>
    <string name="msg_demo_doublebinding">仔细观察这个结果是如何牛逼地自动更新 <ba></ba>根据你不断变化地输入.</string>
    <string name="msg_demo_polling">Demo 展示了通过 RxJava 轮询或者使用 RxJava 重复请求.\n\n简单轮询: 注意日志中可以看到后台对重复发起了多次网络请求(模拟的).</string>
    <string name="msg_demo_exponential_backoff">这两个例子展示了使用 backoff（背压） 策略完成延迟重试和延迟请求.</string>
    <string name="msg_demo_rxbus_1">点击下面的按钮然后 RxBus 将会监听事件</string>
    <string name="msg_demo_form_comb_latest">监视多个使用了 combineLatest 操作符的 observables 的状态. 只有在输入3个包含有效数据的内容后, 提交按钮才会亮起</string>
    <string name="msg_demo_timing">BTN 1: 每次只运行单个任务 (after 2s complete)\nBTN 2: 每 1s 运行任务(延迟 1s 启动) toggle \nBTN 3: 每 1s 运行任务 (立即启动) toggle \nBTN 4: 每 3s 运行一次， 5 次后就结束了 \nBTN 5: 运行任务 A, 暂停一段时间, 然后继续任务 B</string>
    <string name="msg_demo_rotation_persist">这个例子展示了启动一个 Observable 然后通过旋转手机来使用结果. 实际上有很多种方法可以达到目的, 我们使用了可旋转 fragment 来举例</string>
    <string name="msg_demo_network_detector">这个示例展示了如何使用 Subjects 检测网络连接状态\n打开或关闭你的 Wifi/Network 然后查看日志</string>

    <string name="msg_pseudoCache_demoInfo_concat">Concat 合并结果是有序的. 但是请注意后一个订阅是在前一个订阅完成后才开始的.</string>
    <string name="msg_pseudoCache_demoInfo_concatEager">concatEager 是一个非常 6 的操作符. 所有的订阅将会同时开始 (与此同时)，但结果的排序是有序的.</string>
    <string name="msg_pseudoCache_demoInfo_merge">在磁盘（比网络）更快的情况下,merge 操作符给出的结果应该就是输入时的结果. 如果不是这样的话, 一定是出问题了.</string>
    <string name="msg_pseudoCache_demoInfo_mergeSlowDisk">这里是一个假例子，假设磁盘调用比网络调用慢. 你可以看到结果是惊人的.</string>
    <string name="msg_pseudoCache_demoInfo_mergeOptimized">这是一个最优化的 merge 所以你有可能需要用到. 请注意，订阅是立即发生的并且网络数据无论什么时候获取到，都是不会被丢掉的. 但是如果磁盘读取速度比较慢的话, 那么数据有可能就会被丢掉.</string>
    <string name="msg_pseudoCache_demoInfo_mergeOptimizedSlowDisk">类似于 merge 最优化(代码相同). 请注意，如果磁盘速度较慢，数据将会被丢弃，以便支持最新的网络数据，在这种情况下，它会更快。</string>
    <string name="tap_me">点我</string>
    <string name="start_long_operation">开始耗时操作</string>
    <string name="enter_some_search_text">输入搜索内容</string>
    <string name="btn_1">BTN 1</string>
    <string name="btn_2">BTN 2</string>
    <string name="btn_3">BTN 3</string>
    <string name="btn_4">BTN 4</string>
    <string name="btn_5">BTN 5</string>
    <string name="clear_log">清空日志</string>
    <string name="one_hundred">100</string>
    <string name="plus">+</string>
    <string name="eight">8</string>
    <string name="zero">0</string>
    <string name="retry">Retry</string>
    <string name="delay">Delay</string>
    <string name="enter_a_valid_email_below">输入一个有效的 email 地址:</string>
    <string name="password_than_8_chrs"><![CDATA[密码 (> than 8 chrs):]]></string>
    <string name="number_between_1_amp_100"><![CDATA[数字 (between 1 & 100):]]></string>
    <string name="submit">提交</string>
    <string name="start_simple_polling">开始简单轮询</string>
    <string name="start_increasingly_delayed_polling">开始逐渐增加延迟的轮询</string>
    <string name="info_about_the_demo_will_show_up_here">关于 Demo 的信息会被在这里显示</string>
    <string name="concat">concat</string>
    <string name="concat_eager">concatEager</string>
    <string name="merge">merge</string>
    <string name="merge_n_slower_disk">merge (慢磁盘)</string>
    <string name="merge_n_optimized">merge (最优化的)</string>
    <string name="merge_n_optimized_slow_disk">merge (最优化的) 慢磁盘</string>
    <string name="start_disk_network_call"><![CDATA[Start disk > network call]]></string>
    <string name="log_contributors_of">打印贡献者信息:</string>
    <string name="square">square</string>
    <string name="owner">owner</string>
    <string name="retrofit">retrofit</string>
    <string name="reponame">reponame</string>
    <string name="log_with_full_user_info">打印贡献者用户信息:</string>
    <string name="log_user_info">Log User Info:</string>
    <string name="kaushikgopal">kaushikgopal</string>
    <string name="start_operation">开始操作</string>
    <string name="one">1</string>
    <string name="tap">tap!</string>
    <string name="button_1">Button 1</string>
    <string name="button_2">Button 2</string>
    <string name="start">Start</string>
    <string name="i_amz_btn">I AMZ BTN</string>

</resources>
